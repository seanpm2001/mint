type A(a) {
  B(a)
}

type C(a) {
  D(A(a))
  X
}

component Main {
  fun render : String {
    case (C.D(A.B(""))) {
      C.X => ""
      C.D(a) =>
        case (a) {
          A.B(c) =>
            c
        }
    }

    ""
  }
}
--------------------------------------------------------------------------------
import {
  patternVariable as I,
  newVariant as G,
  pattern as H,
  variant as B,
  match as F
} from "./runtime.js";

export const
  A = B(1),
  C = B(0),
  D = B(1),
  E = () => {
    F(G(A)(G(D)(``)), [
      [
        H(C, []),
        () => {
          return ``
        }
      ],
      [
        H(A, [I]),
        (a) => {
          return F(a, [[
            H(D, [I]),
            (b) => {
              return b
            }
          ]])
        }
      ]
    ]);
    return ``
  };
